name: Project Install
description: Checkout project, install dependencies and cache them

runs:
  using: 'composite'
  steps:
    - name: Setup Node
      uses: actions/setup-node@5e21ff4d9bc1a8cf6de233a3057d20ec6b3fb69d # v3.8.1
      with:
        node-version-file: '.nvmrc'
        cache: 'npm'

    - name: Save Node Version
      run: echo "NODE_VERSION=$(node -v)" | tee -a $GITHUB_ENV
      shell: bash

    # Instead of running npm ci (which starts fresh and deletes node_modules) on
    # every job, we cache node_modules. It's a bit overkill because we already
    # cache ~/.npm so no download would happen but this should still be a bit
    # faster
    - name: Cache Node Modules
      id: cache-node-modules
      uses: actions/cache@704facf57e6136b1bc63b828d79edcd491f0ee84 # v3.3.2
      with:
        path: node_modules
        # Invalidate cache for new lock or node version (because node_modules
        # could be set up differently across node versions)
        key:
          node-modules-cache-node-${{env.NODE_VERSION}}-lock-${{
          hashFiles('./package-lock.json') }}

    # Only install dependencies if they weren't installed already
    - if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
      name: Install Dependencies
      run: npm ci
      shell: bash
    - if: ${{ steps.cache-node-modules.outputs.cache-hit == 'true' }}
      run: echo "Using cached node_modules, no need to install dependencies!"
      shell: bash

    # Check that no dependency is unmet
    - name: List Installed Dependencies
      run: npm ls
      shell: bash
